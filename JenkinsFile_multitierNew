pipeline {
  agent any
  environment {
    DB_CREDS=credentials('rdb-mysql-db-credentials')
  }  
 stages {

   stage('Status') {
        
     agent { 
         dockerfile
             {
                 label 'build-in'
                filename 'Dockerfile'
            }
        }
      steps {
   
        sh 'liquibase status --url="jdbc:mysql://mysqldb3.c5kvdhfba2on.ap-south-1.rds.amazonaws.com:3306/myapp" --changeLogFile=my_app-wrapper.xml  --username=$DB_CREDS_USR --password=$DB_CREDS_PSW'
   
      }
    }
    stage('Update') {
       agent { 
         dockerfile
             {
                 label 'build-in'
                filename 'Dockerfile'
            }
        }   
      steps {
        sh 'liquibase update --url="jdbc:mysql://mysqldb3.c5kvdhfba2on.ap-south-1.rds.amazonaws.com:3306/myapp" --changeLogFile=my_app-wrapper.xml --username=$DB_CREDS_USR --password=$DB_CREDS_PSW'
	sh 'liquibase tag wrapper1.0 --url="jdbc:mysql://mysqldb3.c5kvdhfba2on.ap-south-1.rds.amazonaws.com:3306/myapp" --username=$DB_CREDS_USR --password=$DB_CREDS_PSW'
      }
     }

     stage('TomcatDeploy'){  
       stages{
         stage('scm') {  
          steps {
            git 'https://github.com/Tharani95/java-maven-sample-war.git'
          }
        }
	stage('build') {     
          steps {
            sh 'mvn clean package'
          }
        }
        stage('deploy') {  
          steps {
            sh 'ansible-playbook tomcat_deploy.yaml'
          }
        }

       }
     }
     stage('rollback') {
      agent { 
         dockerfile
             {
                 label 'build-in'
                filename 'Dockerfile'
            }
        }   
      steps {
        sh 'liquibase rollback --url="jdbc:mysql://mysqldb3.c5kvdhfba2on.ap-south-1.rds.amazonaws.com:3306/myapp"  --changeLogFile=my_app-wrapper.xml --username=$DB_CREDS_USR --password=$DB_CREDS_PSW --tag=wrapper1.0'
      }
     }
 }
 post {
    always {
      node('build-in'){ 
      cleanWs()
      }
    }
  }

}
